plot a circle with pyplot
surprisingly I didn't find a straight-forward description on how to draw a circle with matplotlib.pyplot (please no pylab) taking as input center (x,y) and radius r. I tried some variants of this: #CODE
... but still didn't get it working.
I'm sure it's possible to do this, but matplotlib is aimed mainly at plotting (i.e. here are some data, put them on a graph), not drawing, so it might not be entirely straightforward.
Radius of scatterplot points is increasingly used to visualize data. Google charts calls them "bubble plots". Gapminder.org is a good exmaple. This *is* plotting, not drawing. I searched the matplotlib github repo for "bubble" and "scatter radius" to no avail, so I don't think this is on the to-do list as far as adding a feature.
plt.scatter() does take a size argument. You can pass lists for the x- and y-coordinates of circles, the circles' radii, and the circles' colors. http://matplotlib.org/1.3.1/api/pyplot_api.html#matplotlib.pyplot.scatter . My error earlier, in thinking that such functionality was not already in matplotlib.
#CODE
Or, if you prefer, look at the `path`s, http://matplotlib.sourceforge.net/users/path_tutorial.html
Trignometric equation of a circle and degress 0 tp 360 , which translates to 0 to 6.28319 radians http://www.mathopenref.com/coordparamcircle.html
You need to add it to an axes. A `Circle` is a subclass of an `Artist`, and an `axes` has an `add_artist` method. 
Here's an example of doing this: #CODE
This results in the following figure: 
The first circle is at the origin, but by default `clip_on` is `True`, so the circle is clipped when ever it extends beyond the `axes`. The third (green) circle shows what happens when you don't clip the `Artist`. It extends beyond the axes (but not beyond the figure, ie the figure size is not automatically adjusted to plot all of your artists). 
The units for x, y and radius correspond to data units by default. In this case, I didn't plot anything on my axes (`fig.gca()` returns the current axes), and since the limits have never been set, they defaults to an x and y range from 0 to 1. 
Here's a continuation of the example, showing how units matter: #CODE
which results in: 
You can see how I set the fill of the 2nd circle to `False`, which is useful for encircling key results (like my yellow data point).
I like this answer because you're "drawing" a circle, rather than plotting. Though plotting would have been my first instinct too.
Why do artists like Ellipse not respect pylab.ion() or matplotlib.interactive(True)? E.g., a call to xlabel() (after calling ion() or interactive(True)) updates the figure immediately, but anything involving these Ellipse objects requires an explicit pylab.show() or matplotlib.show().
FYI: It looks like the Circle class has moved from matplotlib.pyplot to matplotlib.patches since this answer was written.
But but but the circles are oval!
@USER see my other answer: http://stackoverflow.com/questions/9230389/why-is-matplotlib-plotting-my-circles-as-ovals/9232513#9232513
Use the scatter() method. http://matplotlib.org/1.3.1/api/pyplot_api.html#matplotlib.pyplot.scatter #CODE
If you want to plot a set of circles, you might want to see this . The post offered a function named `circles`. 
The function `circles` works like `scatter`, but the sizes of plotted circles are in data unit. 
Here's an example: #CODE
#CODE
A quick condensed version of the accepted answer, that suited my need to quickly plug a circle into an existing plot. Refer to the accepted answer and other answers to understand the details. 
By the way: 
gcf() means Get Current Figure 
gca() means Get Current Axis
Perfect! just exactly what I needed to see right now.Your 'By the way' was quite helpful too! `dir(fig)` shows me over 30 'get' methods, but `gca` has no `get_current_axis` alias. These kinds of fyi answers are wonderful.

