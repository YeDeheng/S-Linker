plot	O
a	O
circle	O
with	O
pyplot	O

surprisingly	O
I	O
didn't	O
find	O
a	O
straight-forward	O
description	O
on	O
how	O
to	O
draw	O
a	O
circle	O
with	O
matplotlib.pyplot	O
(	O
please	O
no	O
pylab	O
)	O
taking	O
as	O
input	O
center	O
(	O
x	O
,	O
y	O
)	O
and	O
radius	O
r	O
.	O

I	O
tried	O
some	O
variants	O
of	O
this	O
:	O
#CODE	O

...	O
but	O
still	O
didn't	O
get	O
it	O
working	O
.	O

I'm	O
sure	O
it's	O
possible	O
to	O
do	O
this	O
,	O
but	O
matplotlib	O
is	O
aimed	O
mainly	O
at	O
plotting	O
(	O
i.e.	O
here	O
are	O
some	O
data	O
,	O
put	O
them	O
on	O
a	O
graph	O
)	O
,	O
not	O
drawing	O
,	O
so	O
it	O
might	O
not	O
be	O
entirely	O
straightforward	O
.	O

Radius	O
of	O
scatterplot	O
points	O
is	O
increasingly	O
used	O
to	O
visualize	O
data	O
.	O

Google	O
charts	O
calls	O
them	O
"	O
bubble	O
plots	O
"	O
.	O

Gapminder.org	O
is	O
a	O
good	O
exmaple	O
.	O

This	O
*	O
is	O
*	O
plotting	O
,	O
not	O
drawing	O
.	O

I	O
searched	O
the	O
matplotlib	O
github	O
repo	O
for	O
"	O
bubble	O
"	O
and	O
"	O
scatter	O
radius	O
"	O
to	O
no	O
avail	O
,	O
so	O
I	O
don't	O
think	O
this	O
is	O
on	O
the	O
to-do	O
list	O
as	O
far	O
as	O
adding	O
a	O
feature	O
.	O

plt.scatter()	O
does	O
take	O
a	O
size	O
argument	O
.	O

You	O
can	O
pass	O
lists	O
for	O
the	O
x-	O
and	O
y-coordinates	O
of	O
circles	O
,	O
the	O
circles	O
'	O
radii	O
,	O
and	O
the	O
circles	O
'	O
colors	O
.	O
http://matplotlib.org/1.3.1/api/pyplot_api.html#matplotlib.pyplot.scatter	O
.	O

My	O
error	O
earlier	O
,	O
in	O
thinking	O
that	O
such	O
functionality	O
was	O
not	O
already	O
in	O
matplotlib	O
.	O

#CODE	O

Or	O
,	O
if	O
you	O
prefer	O
,	O
look	O
at	O
the	O
`	O
path	O
`	O
s	O
,	O
http://matplotlib.sourceforge.net/users/path_tutorial.html	O

Trignometric	O
equation	O
of	O
a	O
circle	O
and	O
degress	O
0	O
tp	O
360	O
,	O
which	O
translates	O
to	O
0	O
to	O
6.28319	O
radians	O
http://www.mathopenref.com/coordparamcircle.html	O

You	O
need	O
to	O
add	O
it	O
to	O
an	O
axes	O
.	O

A	O
`	O
Circle	O
`	O
is	O
a	O
subclass	O
of	O
an	O
`	O
Artist	O
`	O
,	O
and	O
an	O
`	O
axes	O
`	O
has	O
an	O
`	O
add_artist	O
`	O
method	O
.	O

Here's	O
an	O
example	O
of	O
doing	O
this	O
:	O
#CODE	O

This	O
results	O
in	O
the	O
following	O
figure	O
:	O

The	O
first	O
circle	O
is	O
at	O
the	O
origin	O
,	O
but	O
by	O
default	O
`	O
clip_on	O
`	O
is	O
`	O
True	O
`	O
,	O
so	O
the	O
circle	O
is	O
clipped	O
when	O
ever	O
it	O
extends	O
beyond	O
the	O
`	O
axes	O
`	O
.	O

The	O
third	O
(	O
green	O
)	O
circle	O
shows	O
what	O
happens	O
when	O
you	O
don't	O
clip	O
the	O
`	O
Artist	O
`	O
.	O

It	O
extends	O
beyond	O
the	O
axes	O
(	O
but	O
not	O
beyond	O
the	O
figure	O
,	O
ie	O
the	O
figure	O
size	O
is	O
not	O
automatically	O
adjusted	O
to	O
plot	O
all	O
of	O
your	O
artists	O
)	O
.	O

The	O
units	O
for	O
x	O
,	O
y	O
and	O
radius	O
correspond	O
to	O
data	O
units	O
by	O
default	O
.	O

In	O
this	O
case	O
,	O
I	O
didn't	O
plot	O
anything	O
on	O
my	O
axes	O
(	O
`	O
fig.gca()	O
`	O
returns	O
the	O
current	O
axes	O
)	O
,	O
and	O
since	O
the	O
limits	O
have	O
never	O
been	O
set	O
,	O
they	O
defaults	O
to	O
an	O
x	O
and	O
y	O
range	O
from	O
0	O
to	O
1	O
.	O

Here's	O
a	O
continuation	O
of	O
the	O
example	O
,	O
showing	O
how	O
units	O
matter	O
:	O
#CODE	O

which	O
results	O
in	O
:	O

You	O
can	O
see	O
how	O
I	O
set	O
the	O
fill	O
of	O
the	O
2nd	O
circle	O
to	O
`	O
False	O
`	O
,	O
which	O
is	O
useful	O
for	O
encircling	O
key	O
results	O
(	O
like	O
my	O
yellow	O
data	O
point	O
)	O
.	O

I	O
like	O
this	O
answer	O
because	O
you're	O
"	O
drawing	O
"	O
a	O
circle	O
,	O
rather	O
than	O
plotting	O
.	O

Though	O
plotting	O
would	O
have	O
been	O
my	O
first	O
instinct	O
too	O
.	O

Why	O
do	O
artists	O
like	O
Ellipse	O
not	O
respect	O
pylab.ion()	O
or	O
matplotlib.interactive	O
(	O
True	O
)	O
?	O

E.g.	O
,	O
a	O
call	O
to	O
xlabel()	O
(	O
after	O
calling	O
ion()	O
or	O
interactive	O
(	O
True	O
))	O
updates	O
the	O
figure	O
immediately	O
,	O
but	O
anything	O
involving	O
these	O
Ellipse	O
objects	O
requires	O
an	O
explicit	O
pylab.show()	O
or	O
matplotlib.show()	O
.	O

FYI	O
:	O
It	O
looks	O
like	O
the	O
Circle	O
class	O
has	O
moved	O
from	O
matplotlib.pyplot	O
to	O
matplotlib.patches	O
since	O
this	O
answer	O
was	O
written	O
.	O

But	O
but	O
but	O
the	O
circles	O
are	O
oval	O
!	O

@USER	O
see	O
my	O
other	O
answer	O
:	O
http://stackoverflow.com/questions/9230389/why-is-matplotlib-plotting-my-circles-as-ovals/9232513#9232513	O

Use	O
the	O
scatter()	O
method	O
.	O
http://matplotlib.org/1.3.1/api/pyplot_api.html#matplotlib.pyplot.scatter	O
#CODE	O

If	O
you	O
want	O
to	O
plot	O
a	O
set	O
of	O
circles	O
,	O
you	O
might	O
want	O
to	O
see	O
this	O
.	O

The	O
post	O
offered	O
a	O
function	O
named	O
`	O
circles	O
`	O
.	O

The	O
function	O
`	O
circles	O
`	O
works	O
like	O
`	O
scatter	O
`	O
,	O
but	O
the	O
sizes	O
of	O
plotted	O
circles	O
are	O
in	O
data	O
unit	O
.	O

Here's	O
an	O
example	O
:	O
#CODE	O

#CODE	O

A	O
quick	O
condensed	O
version	O
of	O
the	O
accepted	O
answer	O
,	O
that	O
suited	O
my	O
need	O
to	O
quickly	O
plug	O
a	O
circle	O
into	O
an	O
existing	O
plot	O
.	O

Refer	O
to	O
the	O
accepted	O
answer	O
and	O
other	O
answers	O
to	O
understand	O
the	O
details	O
.	O

By	O
the	O
way	O
:	O

gcf()	O
means	O
Get	O
Current	O
Figure	O

gca()	O
means	O
Get	O
Current	O
Axis	O

Perfect	O
!	O

just	O
exactly	O
what	O
I	O
needed	O
to	O
see	O
right	O
now.Your	O
'	O
By	O
the	O
way	O
'	O
was	O
quite	O
helpful	O
too	O
!	O

`	O
dir	O
(	O
fig	O
)`	O
shows	O
me	O
over	O
30	O
'	O
get	O
'	O
methods	O
,	O
but	O
`	O
gca	O
`	O
has	O
no	O
`	O
get_current_axis	O
`	O
alias	O
.	O

These	O
kinds	O
of	O
fyi	O
answers	O
are	O
wonderful	O
.	O

