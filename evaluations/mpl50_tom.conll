gcf()	B-API
means	O
Get	O
Current	O
Figure	O

However	O
,	O
the	O
sample	O
consists	O
of	O
distinct	O
solutions	O
which	O
form	O
lines	O
in	O
the	O
parameter	O
space	O
such	O
that	O
putting	O
everything	O
into	O
a	O
matrix	O
and	O
using	O
`	O
imshow	B-API
`	O
is	O
not	O
desirable	O
because	O
of	O
the	O
pixelation	O
artefacts	O
(	O
Figure	O
1	O
)	O
.	O

While	O
it	O
might	O
be	O
possible	O
to	O
hack	O
`	O
JointGrid	O
`	O
to	O
get	O
this	O
to	O
work	O
,	O
I	O
suspect	O
it	O
will	O
very	O
likely	O
be	O
easier	O
to	O
just	O
use	O
`	O
kdeplot	O
`	O
on	O
one	O
Axes	O
,	O
using	O
`	O
twinx	B-API
`	O
and	O
`	O
twiny	B-API
to	O
place	O
and	O
scale	O
the	O
marginal	O
plots	O
properly	O
.	O

I'm	O
using	O
imshow()	B-API
to	O
draw	O
a	O
2D	O
numpy	O
array	O
,	O
so	O
for	O
example	O
:	O
#CODE	O

For	O
me	O
the	O
simplest	O
way	O
is	O
plotting	O
directly	O
the	O
masks	O
with	O
imshow	B-API
,	O
passing	O
different	O
colormaps	O
.	O

I'm	O
doing	O
a	O
hist	O
plot	O
and	O
I	O
want	O
some	O
numbers	O
shown	O
in	O
the	O
plot	O
,	O
so	O
I	O
put	O
in	O
a	O
text	O
box	O
using	O
mathtext	B-API
for	O
the	O
text	O
,	O
but	O
I	O
doesn't	O
work	O
and	O
I	O
can't	O
see	O
why	O
.	O

You	O
can	O
use	O
the	O
`	O
set_position()	B-API
`	O
method	O
of	O
the	O
`	O
Spine	B-API
`	O
class	O
:	O
#CODE	O

What	O
you	O
should	O
do	O
is	O
save	O
a	O
reference	O
to	O
the	O
first	O
`	O
Text	B-API
`	O
object	O
and	O
update	O
its	O
contents	O
by	O
calling	O
its	O
`	O
set_text()	B-API
`	O
method	O
.	O

There	O
is	O
a	O
references	O
to	O
the	O
Text	B-API
object	O
returned	O
by	O
the	O
original	O
setting	O
of	O
suptitle	B-API
in	O
figure.texts	O
.	O

I	O
think	O
you	O
need	O
to	O
displace	O
the	O
`	O
Text	B-API
`	O
object	O
,	O
using	O
the	O
`	O
set_position	B-API
((	O
x	O
,	O
y	O
))`	O
method	O
.	O

Use	O
Axis	B-API
method	O
`	O
set_xscale	B-API
`	O
or	O
`	O
set_yscale	B-API
`	O
.	O

This	O
is	O
not	O
particularly	O
well	O
documented	O
,	O
but	O
`	O
Polygon	B-API
`	O
objects	O
have	O
a	O
pair	O
of	O
methods	O
`	O
get_xy	B-API
`	O
and	O
`	O
set_xy	B-API
`	O
.	O

Currently	O
I	O
use	O
the	O
`	O
add_patch	B-API
(	O
Rectangle	B-API
(	O
...	O
))`	O
,	O
but	O
it	O
does	O
not	O
fit	O
really	O
well	O
.	O

Here	O
,	O
what	O
you	O
have	O
done	O
is	O
capture	O
the	O
`	O
Axes	B-API
`	O
instance	O
that	O
is	O
returned	O
from	O
`	O
add_subplot()	B-API
`	O
.	O

The	O
`	O
transform	B-API
`	O
in	O
this	O
case	O
is	O
a	O
`	O
BboxTransformTo	O
`	O
object	O
,	O
which	O
:	O

But	O
when	O
I	O
checked	O
the	O
source	O
code	O
of	O
draw_networkx_nodes	O
draw_networkx	O
,	O
I	O
realized	O
that	O
it	O
is	O
not	O
a	O
straight	O
forward	O
task	O
as	O
the	O
draw	B-API
function	O
stores	O
the	O
positions	O
(	O
nodes	O
and	O
edges	O
)	O
in	O
a	O
numpy	O
array	O
,	O
send	O
it	O
to	O
the	O
ax.scatter	B-API
function	O
of	O
matplotlib	O
(	O
sourcecode	O
)	O
which	O
is	O
a	O
bit	O
hard	O
to	O
manipulate	O
without	O
messing	O
something	O
up	O
.	O

This	O
simply	O
calls	O
the	O
draw	B-API
method	O
of	O
the	O
figure	O
periodically	O
.	O

Then	O
I	O
just	O
added	O
a	O
signal	O
to	O
the	O
custom	O
version	O
and	O
overrode	O
the	O
draw	B-API
method	O
.	O

I'm	O
also	O
panning	O
and	O
zooming	O
into	O
this	O
figure	O
,	O
and	O
have	O
been	O
using	O
the	O
draw	B-API
method	O
to	O
show	O
the	O
new	O
perspectives	O
from	O
zooming	O
in	O
(	O
using	O
set_xlim	B-API
and	O
set_ylim	B-API
)	O
and	O
from	O
panning	O
(	O
drag_pan	B-API
and	O
start_pan	B-API
)	O
.	O

I	O
would	O
use	O
`	O
ax.autoscale	B-API
(	O
enable=False	O
)`	O
before	O
your	O
call	O
to	O
`	O
scatter	B-API
`	O
.	O

You	O
can	O
perhaps	O
loop	O
into	O
your	O
`	O
AxesSubplot	O
`	O
objects	O
and	O
call	O
`	O
autoscale	B-API
`	O
passing	O
the	O
`	O
axis	O
`	O
parameter	O
:	O
#CODE	O

The	O
trick	O
is	O
at	O
the	O
end	O
,	O
in	O
the	O
custom	O
refresh	B-API
method	O
!	O

For	O
what	O
you're	O
wanting	O
to	O
do	O
,	O
you'd	O
be	O
far	O
better	O
off	O
using	O
annotate	B-API
.	O

It's	O
quite	O
simple	O
to	O
do	O
manually	O
with	O
`	O
annotate	B-API
`	O
.	O

You	O
can	O
use	O
the	O
annotate	B-API
command	O
to	O
place	O
text	O
annotations	O
at	O
any	O
x	O
and	O
y	O
values	O
you	O
want	O
.	O

@USER	O
I'm	O
not	O
sure	O
why	O
we	O
have	O
to	O
explicitly	O
call	O
`	O
draw	B-API
`	O
.	O

The	O
`	O
boxplot	B-API
`	O
function	O
only	O
plots	O
quartiles	O
(	O
0	O
,	O
25	O
,	O
50	O
,	O
75	O
,	O
100	O
)	O
.	O

You	O
should	O
use	O
the	O
`	O
hist	B-API
`	O
function	O
.	O

An	O
similar	O
example	O
of	O
such	O
plot	O
is	O
"	O
hist	B-API
(	O
x	O
,	O
orientation=	O
'	O
horizontal	O
')"	O
.	O

I	O
need	O
to	O
use	O
the	O
`	O
hist	B-API
`	O
function	O
,	O
I	O
have	O
looked	O
elsewhere	O
on	O
this	O
site	O
but	O
I	O
haven't	O
found	O
anything	O
.	O

How	O
can	O
I	O
prevent	O
the	O
labels	O
of	O
`	O
xticks	B-API
`	O
from	O
overlapping	O
with	O
the	O
labels	O
of	O
`	O
yticks	B-API
`	O
when	O
using	O
`	O
hist	B-API
`	O
(	O
or	O
other	O
plotting	O
commands	O
)	O
in	O
matplotlib	O
?	O

An	O
easy	O
way	O
to	O
do	O
this	O
is	O
to	O
add	O
`	O
0j	O
`	O
to	O
the	O
argument	O
of	O
the	O
`	O
sqrt	B-API
`	O
,	O
like	O
this	O
,	O
`	O
sqrt	B-API
(	O
1+0j-	O
(	O
1	O
/	O
x	O
)	O
**2	O
)`	O
.	O

You	O
need	O
to	O
set	O
the	O
new	O
coordinates	O
of	O
the	O
datapoints	O
in	O
the	O
internal	O
`	O
_ofsets3d	O
`	O
variable	O
of	O
the	O
`	O
Line3DCollection	O
`	O
object	O
returned	O
by	O
the	O
`	O
scatter	B-API
`	O
function	O
.	O

I	O
think	O
changing	O
the	O
arrowstyle	B-API
will	O
help	O
here	O
.	O

I've	O
confirmed	O
that	O
this	O
works	O
for	O
`	O
plot()	B-API
`	O
as	O
well	O
as	O
`	O
imshow()	B-API
`	O
.	O

However	O
,	O
the	O
savefig()	B-API
output	O
is	O
too	O
zoomed	O
out	O
,	O
too	O
general	O
.	O

The	O
helper	O
functions	O
date2num()	B-API
,	O
num2date()	B-API
and	O
drange()	B-API
are	O
used	O
to	O
facilitate	O
easy	O
conversion	O
to	O
and	O
from	O
datetime	O
and	O
numeric	O
ranges	O
.	O

Documentation	O
of	O
legacy	O
`	O
subplot()	B-API
`	O
is	O
[	O
here	O
]	O
(	O
#URL	O
)	O
and	O
`	O
subplots()	B-API
`	O
is	O
[	O
here	O
]	O
(	O
#URL	O
)	O
.	O

